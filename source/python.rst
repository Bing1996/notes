Python
========

Python装饰器
----------------

- 什么是Python装饰器
  一个装饰器就是一个函数，它接受一个函数作为函数并返回这一个新的函数


Python单元测试
----------------

实际上，如果能把函数的功能性实现的print结果和预期结果落实到测试代码中，加几个assert语句，就是单元测试了。并且这些词是代码也能成为很好的API手册，看这些测试用例就知道如何进行调用了。

- 为什么要做单元测试？

  + 编写单元测试的难易程度能够直接反应出代码的设计水平，能写出单元测试和写不出单元测试之间体现了编程能力上的巨大的鸿沟
  + 确保代码质量
  + 改善代码设计， 难以测试的代码一般都是不够简洁的代码
  + 保证重构不会引入新的问题，以函数为单位进行重构的时候，只需要重新跑测试基本就可以保证不引入新的问题

- 目前Python的单元测试有许多，unittest、pydoc、pytest等。此工具书仅展示Python原生库中的unittest模块所带来的单元测试

- 测试驱动开发TDD的流程

为了实现一个函数，采用TDD的流程
  1.  在编写失败的单元测试之前，不编写任何其他产品代码
  2.  只要有一个单元测试失败，就不再写测试代码
  3.  产品代码能够让当前失败的单元测试成功通过即可



关于驱动代码、桩代码和Mock代码
  
+ 驱动代码（Driver）指调用被测函数的代码，在单元测试过程中，驱动模块通常包括调用被测函数前的数据准备、调用被测函数以及验证相关结果三个步骤。驱动代码的结构，通常由单元测试的框架决定。
+ 桩代码（Stub）是用来代替真实代码的临时代码，比如，某个函数A的内部实现中调用了一个尚未实现的函数B，为了对函数A的逻辑进行测试，那么就需要模拟一个函数B，这个模拟的函数B的实现就是所谓的桩代码。
+ Mock代码和桩代码的本质区别是:测试期待结果的验证（Assert and Expectiation）。

  + 对于Mock代码来说，会关注Mock方法是否被调用，以什么样的参数被调用，被调用的次数，以及多个Mock函数的先后调用顺序。所以在使用Mock代码的测试中，对于结果的验证（也就是assert），通常出现在Mock函数中。
  + 对于桩代码来说，是利用Stub来控制被测函数的执行路径，不会去关注Stub是否被调用以及怎么样被调用。